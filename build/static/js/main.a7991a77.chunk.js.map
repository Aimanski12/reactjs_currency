{"version":3,"sources":["components/Header/Navbar/Navbar.js","components/Header/Middle/Middle.js","components/Header/Header.js","components/Api/Api.js","components/Photospace/Photospace.js","components/About/About.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","Middle","Header","Api","Photospace","About","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTA4BeA,G,sBAxBA,WAGb,OACE,6BACE,yBAAKC,UAAU,aACX,uBAAGA,UAAU,sBAEjB,yBAAKA,UAAU,QACb,uBAAGA,UAAU,6BACb,oDAEF,yBAAKA,UAAU,QACb,4BACE,4BAAI,uBAAGC,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,eACJ,4BAAI,uBAAGA,KAAK,KAAR,iBCHCC,G,MAbA,WAEb,OACE,yBAAKF,UAAU,YACb,yBAAKA,UAAU,aACb,iDACA,kQACA,wDCKOG,EAVA,WAEb,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCcSC,G,MAtBH,WAEV,OACE,yBAAKJ,UAAU,gBACb,yBAAKA,UAAU,aACb,6CACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,+CACA,8PACA,6CAEF,yBAAKA,UAAU,YACb,kDACA,+NACA,kDCNGK,G,MATI,WAEjB,OACE,yBAAKL,UAAU,eACb,+DCYSM,G,MAhBD,WAEZ,OACG,yBAAKN,UAAU,YACd,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACb,yBAAKO,IAAI,yBAAyBC,IAAI,MAExC,yBAAKR,UAAU,WACb,4CACA,giBCgCKS,MApCf,WACE,OACI,yBAAKT,UAAU,IACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,OAGF,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,yBAAKA,UAAU,UACb,yBAAKA,UAAU,cACb,2BAAG,uBAAGC,KAAK,0BAAR,sBAEL,yBAAKD,UAAU,gBAEb,yBAAKO,IAAI,mBAAmBC,IAAI,KAChC,yBAAKD,IAAI,qBAAqBC,IAAI,KAClC,yBAAKD,IAAI,oBAAoBC,IAAI,KACjC,yBAAKD,IAAI,oBAAoBC,IAAI,SCjBzBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a7991a77.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navbar.css';\r\n\r\n\r\nconst Navbar = () => {\r\n\r\n\r\n  return(\r\n    <nav>\r\n      <div className=\"menu-icon\">\r\n          <i className=\"fa fa-bars fa-2x\"></i>\r\n      </div>\r\n      <div className=\"logo\">\r\n        <i className=\"fas fa-dollar-sign fa-lg\"></i>\r\n        <span>Currency Exchange</span>\r\n      </div>\r\n      <div className=\"menu\">\r\n        <ul>\r\n          <li><a href=\"/\">Home</a></li>\r\n          <li><a href=\"/\">Currencies</a></li>\r\n          <li><a href=\"/\">Convert</a></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n\r\nexport default Navbar","import React from 'react';\r\nimport './Middle.css'\r\n\r\n\r\nconst Middle = () => {\r\n\r\n  return (\r\n    <div className=\"mainText\">\r\n      <div className=\"container\">\r\n        <h1>Currency Exchange</h1>\r\n        <p>I build this website to showcase all common currency rates and its published exchange value based from the European Central Bank. You can browse and navigate to this website to view currencies and convert difference currencies.</p>\r\n        <button>Check Currencies</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Middle","import React, {Fragment} from 'react';\r\nimport './Header.css'\r\n\r\nimport Navbar from './Navbar/Navbar'\r\nimport Middle from './Middle/Middle'\r\n\r\nconst Header = () => {\r\n\r\n  return (\r\n    <Fragment>\r\n      <Navbar />\r\n      <Middle />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport './Api.css'\r\n\r\nconst Api = () => {\r\n  \r\n  return (\r\n    <div className=\"api_resource\">\r\n      <div className=\"container\">\r\n        <h1>API Resources</h1>\r\n        <div className=\"api\">\r\n          <div className=\"api_desc\">\r\n            <h2>Frankfurter API</h2>\r\n            <p>Frankfurter is a free and open-source currency data API that tracks  reference exchange rates published by the European Central Bank. You only need to sign-up for a free API key that you can use for your entire application.</p>\r\n            <button>View API</button>\r\n          </div>\r\n          <div className=\"api_desc\">\r\n            <h2>Rest Countries API</h2>\r\n            <p>REST Countries is a free GET query API that allows the user to query informations about certain countries. It provides lots of data that is very useful for programmming projects and many more.</p>\r\n            <button>View API</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Api","import React from 'react';\r\nimport './Photospace.css'\r\n\r\nconst Photospace = () => {\r\n\r\n  return (\r\n    <div className=\"photo_space\">\r\n      <h1>Know the value of your money</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Photospace\r\n","import React from 'react';\r\nimport './About.css'\r\n\r\nconst About = () => {\r\n\r\n  return (\r\n     <div className=\"about_me\">\r\n      <div className=\"container\">\r\n        <div className=\"image\">\r\n          <img src=\"/img/aiman_adlawan.png\" alt=\"\"/>\r\n        </div>\r\n        <div className=\"message\">\r\n          <p>Aiman Adlawan</p>\r\n          <p>Thank you for taking time to look into this project. This is made with dedication and effort. If you are in this website, I would like to assume you are a programmer with some level of experience or someone who is learning how to build software applications or maybe you are here to know more about me. If so, you can choose from many of my social media handles. If you like this project, please give it a like on my Github page or you can choose from any social media platforms provided below. Thanks again.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default About","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header/Header'\nimport Api from './components/Api/Api'\nimport Photospace from './components/Photospace/Photospace'\nimport About from './components/About/About'\n\n\nfunction App() {\n  return (\n      <div className=\"\">\n        <div className='header'>\n          <Header />\n        </div>\n\n        <Api />\n        <Photospace />\n        <About />\n\n        <div className=\"footer\">\n          <div className=\"my_website\">\n            <p><a href=\"https://aimanski12.com\">aimanadlawan.com</a></p>\n          </div>\n          <div className=\"social_media\">\n\n            <img src=\"./img/github.png\" alt=\"\"/>\n            <img src=\"./img/linkedin.png\" alt=\"\"/>\n            <img src=\"./img/youtube.png\" alt=\"\"/>\n            <img src=\"./img/twitter.png\" alt=\"\"/> \n          </div>\n        </div>\n\n\n\n\n      </div>\n\n    \n\n\n\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}